<?php

namespace App\Http\Controllers\Auth;

use Auth;
use App\User;
use Validator; 
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Input;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;

class AuthController extends Controller
{
    
     protected $auth;
    /*
    |--------------------------------------------------------------------------
    | Registration & Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users, as well as the
    | authentication of existing users. By default, this controller uses
    | a simple trait to add these behaviors. Why don't you explore it?
    |
    */

    use AuthenticatesAndRegistersUsers, ThrottlesLogins;

    /**
     * Create a new authentication controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest', ['except' => 'getLogout']);
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        $validator= Validator::make($data, [
            'name' => 'required|max:10',
           
            'email' => 'required|email|max:255|unique:users',
            'password' => 'required|confirmed|min:5',
        ]);
   
   
    }
    
    
    public function postLogin(){
 
             $rules = array(
                        // just a normal required validation
        'email'            => 'required|email|unique:users',     // required and must be unique in the ducks table
        'password'         => 'required|min:5',
                 // required and has to match the password field
    );
              $validator = Validator::make(Input::all(), $rules);
              

    if ($validator->fails()) {

        
        $messages = $validator->messages();
      
        return view('/auth/login')->withErrors($validator);

    } else 
        {
        
         $email = Input::get('email');
        $password = Input::get('password');
            return $password;
          if (Auth::attempt(['email' => $email, 'password' => $password]))
            {
            return redirect()->intended('Inicio');
            }
        }

    }


             
        
        
    
        
        
        
    
    


    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {
        return User::create([
            
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => bcrypt($data['password']),
        ]);
    }

  /*  public function postRegister()
    {

        $this->auth->login($this->registrar->create($request->all()));
        return redirect('/EditarPerfil');
    } */

   // protected $loginPath = '/Inicio';
    protected $redirectTo='/Inicio';
   // protected $redirectAfterLogout = '/Inicio';

}
